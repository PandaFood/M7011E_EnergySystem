swagger: "2.0"
info:
  description: "This is the API for Green Lean Electrics"
  version: "1.0.0"
  title: "GLE API"
host: "simulator:3000"
basePath: "/docs"
schemes:
- "https"
- "http"
definitions:
  House:
    properties:
      id:
        type: "string"
      consumption:
        type: "int"
      batteryPercentage:
        type: "float"
  HouseId:
    properties:
      houseId:
        type: "string"
  Storage:
    properties:
      id:
        type: "string"
      houseId:
        type: "string"
      maxCapacity:
        type: "float"
      currentCapacity:
        type: "float"
      fillPercentage:
        type: "float"
  StorageEvent:
    properties:
      id:
        type: "string"
      storageId:
        type: "string"
      currentCapacity:
        type: "float"
      timestamp:
        type: "timestamp"

  Producer:
    properties:
      id:
        type: "string"
      houseId:
        type: "string"
      type:
        type: "string"
      coord:
        type: "array"
    
  ProducerEvent:
    properties:
      id:
        type: "string"
      producerId:
        type: "string"
      status:
        type: "string"
      power:
        type: "float"
      windSpeed:
        type: "float"
      timestamp:
        type: "timestamp"

  Price:
    properties:
      price:
        type: integer
      useCalculatedPrice:
        type: boolean



paths:
  /api/house:
    get:
      tags:
        - "House"
      summary: "Returns all houses"
      description: "Returns all houses"
      produces:
        - "application/json"
      responses:
        200:
          description: "An array of houses"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/House'
    post:
      tags:
        - House
      summary: "Add a new house"
      description: "Add a new house"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties: 
            id:
              type: string
      responses:
        200:
          description: "House Create"
        500:
          description: "Could not create house"
      

  /api/house/{houseID}:
    get:
      tags:
        - House
      summary: "Returns house with given ID"
      description: "Returns house with given ID"
      produces:
        - application/json
      parameters:
      - name: "houseID"
        in: "path"
        description: "ID of house to return"
        required: true
        type: "string"
      responses:
        200:
          description: A house object
          schema:
            $ref: '#/definitions/House'
    post:
      tags:
        - House
      summary: "Update house with given ID"
      description: "Update house with given ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "houseID"
        in: "path"
        description: "ID of house to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties: 
            id:
              type: string
            consumption:
              type: integer
              format: int64
            batteryPercentage: 
              type: number
              minimum: 0
              maximum: 1
              format: float
      responses:
        200:
          description: "House Updated"
        500:
          description: "Could not update house"
    
  /api/storage:
    get:
      tags:
        - "Storage"
      summary: "Returns all storages belonging to a house"
      description: "Returns all storages belonging to a house"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/HouseId"
      responses:
        200:
          description: "An array of storages"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Storage'
    post:
      tags:
        - "Storage"
      summary: "Add a new storage to a house"
      description: "Add a new storage to a house"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties: 
            id:
              type: string
            maxCapacity:
              type: integer
              format: int64
            currentCapacity: 
              type: integer
              format: int64
      responses:
        200:
          description: "Storage Created"
        400:
          description: "Invalid input supplied"
        405:
          description: "Validation exception"

  /api/storage/{storageId}:
    get:
      tags:
        - Storage
      description: Returns storage with given id
      produces:
        - application/json
      parameters:
      - name: "storageId"
        in: "path"
        description: "ID of storage to return"
        required: true
        type: "string"
      responses:
        200:
          description: A Storage object
          schema:
            $ref: '#/definitions/Storage'
                      
  /api/storageEvent:
    get:
      tags:
        - "Storage"
      summary: "Returns all storage events belonging to a storage"
      description: "Returns all storage events belonging to a storage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/storageId"
      responses:
        200:
          description: "An array of storage events"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/StorageEvent'
    post:
      tags:
        - "Storage"
      summary: "Add a new storage event to a storage"
      description: "Add a new storage event to a storage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageEvent"
      responses:
        400:
          description: "Invalid input supplied"
        405:
          description: "Validation exception"    

  /api/storageEvent/latest:
    get:
      tags:
        - "Storage"
      summary: "Returns the lastest storage events belonging to a storage"
      description: "Returns the lastest storage events belonging to a storage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/storageId"
      responses:
        200:
          description: "An storage events"
          schema:
            $ref: '#/definitions/StorageEvent'

  /api/producer:
    get:
      tags:
        - "Producer"
      summary: "Returns all producers belonging to a house"
      description: "Returns all producers belonging to a house"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/HouseId"
      responses:
        200:
          description: "An array of storages"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Storage'
    post:
      tags:
        - "Producer"
      summary: "Add a new producer to a house"
      description: "Add a new producer to a house"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Producer"
      responses:
        400:
          description: "Invalid input supplied"
        405:
          description: "Validation exception"

  /api/producerEvent:
    get:
      tags:
        - "Producer"
      summary: "Returns all producer events belonging to a producer"
      description: "Returns all producer events belonging to a producer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProducerId"
      responses:
        200:
          description: "An array of storage events"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/StorageEvent'

  /api/latestProducerEvent:
    get:
      tags:
        - "Producer"
      summary: "Returns the latest producer events belonging to a producer"
      description: "Returns the latest producer events belonging to a producer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProducerId"
      responses:
        200:
          description: "A producer events"
          schema:
            $ref: '#/definitions/StorageEvent'
  
  /api/allLatestProducerEvent:
    get:
      tags:
        - "Producer"
      summary: "Returns all the latest producer events belonging to a house"
      description: "Returns all the latest producer events belonging to a house"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProducerId"
      responses:
        200:
          description: "An array of producer events"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/StorageEvent'

  /api/currentPrice:
    get:
      tags:
        - "Price"
      summary: "Returns the current price and the calculated price"
      description: "Returns the current price and the calculated price"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The current price and the if the system uses the calculated price"
          schema:
            type: "object"
            items:
              $ref: '#/definitions/Price'
    post:
      tags:
        - "Price"
      summary: "Sets the current price and if to use calculated price"
      description: "Sets the current price and if to use calculated price"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Price"
      responses:
        200:
          description: "Price set"
        500:
          description: "Could not set price"


  /api/systemPower:
    get:
      tags:
        - "Power"
      summary: "Returns the current power in the system"
      description: "Returns the current power in the system"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The current price and the if the system uses the calculated price"
          schema:
            type: "object"
            properties: 
              power:
                type: integer

  /api/coal/battery:
    post:
      tags:
        - "CoalPlant"
      summary: "Sets the battery percentage of the power plant"
      description: "Sets the battery percentage of the power plant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: object
            properties: 
              newPercentage:
                type: number
                minimum: 0
                maximum: 1
                format: float
      responses:
        200:
          description: "Battery Percentage Updated"
        500:
          description: "Battery percentage could not be updated"
              
  /api/coal/status:
    get:
      tags:
        - "CoalPlant"
      summary: "Returns the coal plant status"
      description: "Returns the coal plant status"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The current status of the power plant"
          schema:
            type: "object"
            properties: 
              capacity:
                type: integer
              maxCapacity:
                type: integer
              status:
                type: string
              batteryPercentage:
                type: float
                minimum: 0
                maximum: 1
                format: float

  /api/coal/start:
    post:
      tags:
        - "CoalPlant"
      summary: "Starts the coal plant"
      description: "Starts the coal plant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Starting coal plant"
        500:
          description: "Coal Plant is not turned off"
  /api/coal/stop:
    post:
      tags:
        - "CoalPlant"
      summary: "Stops the coal plant"
      description: "Stops the coal plant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Stopping coal plant"
        500:
          description: "Coal Plant is not turned on"

  /api/blackout:
    get:
      tags:
        - "Blackout"
      summary: "Get houses with blackout status"
      description: "Get houses with blackout status"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of houses with blackout status"
          schema:
            type: "object"
            properties: 
              houseId:
                type: boolean
  /api/banUser:
    post:
      tags:
        - "House"
      summary: "Ban house form selling to market for a time"
      description: "Ban house form selling to market for a time"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: object
            properties: 
              houseId:
                type: string
              banTime:
                type: number
                minimum: 10
                maximum: 100
      responses:
        200:
          description: "User banned"